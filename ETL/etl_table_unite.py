# =============================================================================
# Script : etl_table_unite.py
# Description : 
# Ce script cr√©e la table de r√©f√©rence des unit√©s de mesure.
# 
# EXTRACTION :
# - Source : Donn√©es en dur (pas de source externe)
# - Donn√©es : Liste des unit√©s de mesure utilis√©es
# 
# TRANSFORMATION :
# - Attribution d'identifiants uniques
# - Structure : id_unite, unite
# 
# CHARGEMENT :
# - Fichier : unite_clean.csv
# - Format : CSV (s√©parateur: ',', encodage: UTF-8)
# =============================================================================

import pandas as pd
import sys
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('../ETL/etl.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

# ---------------------- üü¢ EXTRACTION (Extract) ----------------------
def extract_data():
    """
    EXTRACTION : Cr√©ation des donn√©es des unit√©s
    Returns:
        DataFrame: DataFrame des unit√©s ou None en cas d'erreur
    """
    try:
        logging.info("üîÑ D√©but de l'extraction...")
        
        # D√©finition des unit√©s de mesure
        unites = [
            {'id_unite': 1, 'unite': 'nombre de personnes'},
            {'id_unite': 2, 'unite': 'pourcentage'},
            {'id_unite': 3, 'unite': 'ratio'},
            {'id_unite': 4, 'unite': 'ann√©e'}
        ]
        
        # Cr√©ation du DataFrame
        unite_df = pd.DataFrame(unites)
        
        if unite_df.empty:
            raise ValueError("Erreur lors de la cr√©ation du DataFrame des unit√©s")
            
        logging.info("‚úÖ Extraction r√©ussie")
        return unite_df
        
    except ValueError as e:
        logging.error(f"‚ùå Erreur de donn√©es : {str(e)}")
        return None
    except Exception as e:
        logging.error(f"‚ùå Erreur inattendue lors de l'extraction : {str(e)}")
        return None

# ---------------------- üü° TRANSFORMATION (Transform) ----------------------
def transform_data(df):
    """
    TRANSFORMATION : V√©rification et nettoyage des donn√©es
    Args:
        df (DataFrame): DataFrame des unit√©s
    Returns:
        DataFrame: Donn√©es transform√©es ou None en cas d'erreur
    """
    try:
        logging.info("üîÑ D√©but de la transformation...")
        
        # V√©rification des colonnes requises
        required_columns = ['id_unite', 'unite']
        if not all(col in df.columns for col in required_columns):
            raise ValueError("Colonnes manquantes dans le DataFrame")
            
        # V√©rification des types de donn√©es
        if not df['id_unite'].dtype.kind in 'ui':  # unsigned integer
            df['id_unite'] = df['id_unite'].astype(int)
        if not df['unite'].dtype == 'object':  # string
            df['unite'] = df['unite'].astype(str)
            
        # V√©rification des doublons
        if df.duplicated().any():
            raise ValueError("Des doublons ont √©t√© d√©tect√©s")
            
        logging.info("‚úÖ Transformation r√©ussie")
        return df
        
    except ValueError as e:
        logging.error(f"‚ùå Erreur de transformation : {str(e)}")
        return None
    except Exception as e:
        logging.error(f"‚ùå Erreur inattendue lors de la transformation : {str(e)}")
        return None

# ---------------------- üîµ CHARGEMENT (Load) ----------------------
def load_data(df):
    """
    CHARGEMENT : Sauvegarde des donn√©es transform√©es
    Args:
        df (DataFrame): Donn√©es √† sauvegarder
    Returns:
        bool: True si succ√®s, False sinon
    """
    try:
        logging.info("üîÑ D√©but du chargement...")
        
        output_file = Path('../DatasetClean/unite_clean.csv')
        
        # 1. Pr√©paration du dossier de sortie
        try:
            output_file.parent.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            raise IOError(f"Impossible de cr√©er le dossier de sortie : {str(e)}")
            
        # 2. Sauvegarde des donn√©es
        try:
            df.to_csv(output_file, index=False)
        except Exception as e:
            raise IOError(f"Erreur lors de la sauvegarde : {str(e)}")
            
        # 3. V√©rification
        if not output_file.exists():
            raise FileNotFoundError("Le fichier n'a pas √©t√© cr√©√©")
            
        # 4. Validation des donn√©es sauvegard√©es
        try:
            verification_df = pd.read_csv(output_file)
            if verification_df.empty or len(verification_df) != len(df):
                raise ValueError("Les donn√©es sauvegard√©es sont incompl√®tes")
        except Exception as e:
            raise ValueError(f"Erreur lors de la v√©rification : {str(e)}")
            
        logging.info(f"‚úÖ Chargement r√©ussi - {len(df)} unit√©s enregistr√©es")
        return True
        
    except (IOError, FileNotFoundError, ValueError) as e:
        logging.error(f"‚ùå Erreur de chargement : {str(e)}")
        return False
    except Exception as e:
        logging.error(f"‚ùå Erreur inattendue lors du chargement : {str(e)}")
        return False

# ---------------------- üöÄ EXECUTION ----------------------
def main():
    """
    Fonction principale : Orchestration du processus ETL
    """
    try:
        logging.info("üöÄ D√©but du processus ETL pour unite")
        
        # EXTRACTION
        unite_df = extract_data()
        if unite_df is None:
            raise Exception("√âchec de l'extraction des donn√©es")
            
        # TRANSFORMATION
        transformed_df = transform_data(unite_df)
        if transformed_df is None:
            raise Exception("√âchec de la transformation des donn√©es")
            
        # CHARGEMENT
        if not load_data(transformed_df):
            raise Exception("√âchec du chargement des donn√©es")
            
        logging.info("‚úÖ Processus ETL termin√© avec succ√®s")
        
    except Exception as e:
        logging.error(f"‚ùå Erreur dans le processus ETL : {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()