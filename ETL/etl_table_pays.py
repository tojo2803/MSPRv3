# =============================================================================
# Script : etl_table_pays.py
# Description : 
# Ce script extrait et transforme les donn√©es des pays √† partir des fichiers sources.
# 
# EXTRACTION :
# - Sources : 
#   * art_coverage_by_country_clean.csv
#   * art_pediatric_coverage_by_country_clean.csv
#   * no_of_cases_adults_15_to_49_by_country_clean.csv
#   * no_of_deaths_by_country_clean.csv
#   * no_of_people_living_with_hiv_by_country_clean.csv
#   * prevention_of_mother_to_child_transmission_by_country_clean.csv
# - Donn√©es : Noms des pays et leurs r√©gions OMS
# 
# TRANSFORMATION :
# - Standardisation des noms de pays (minuscules, sans espaces)
# - D√©doublonnage des pays
# - Attribution d'identifiants uniques
# - Structure : id_pays, pays, region_who
# 
# CHARGEMENT :
# - Fichier : pays_clean.csv
# - Format : CSV (s√©parateur: ',', encodage: UTF-8)
# =============================================================================

import pandas as pd
import sys
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('../ETL/etl.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

# ---------------------- üü¢ EXTRACTION (Extract) ----------------------
def extract_data():
    """
    EXTRACTION : Lecture des fichiers sources
    Returns:
        list: Liste des DataFrames extraits ou None en cas d'erreur
    """
    try:
        logging.info("üîÑ D√©but de l'extraction...")
        
        files = [
            "../SourceData/art_coverage_by_country_clean.csv",
            "../SourceData/art_pediatric_coverage_by_country_clean.csv",
            "../SourceData/no_of_cases_adults_15_to_49_by_country_clean.csv",
            "../SourceData/no_of_deaths_by_country_clean.csv",
            "../SourceData/no_of_people_living_with_hiv_by_country_clean.csv",
            "../SourceData/prevention_of_mother_to_child_transmission_by_country_clean.csv"
        ]
        
        dataframes = []
        for file_path in files:
            path = Path(file_path)
            if not path.exists():
                raise FileNotFoundError(f"Fichier introuvable : {file_path}")
                
            df = pd.read_csv(file_path)
            if df.empty:
                logging.warning(f"‚ö†Ô∏è Le fichier {file_path} est vide")
                continue
                
            # V√©rification des colonnes n√©cessaires
            country_col = next((col for col in df.columns if "Country" in col), None)
            region_col = next((col for col in df.columns if "WHO Region" in col), None)
            
            if country_col:
                df.rename(columns={country_col: "pays"}, inplace=True)
                if region_col:
                    df.rename(columns={region_col: "region_who"}, inplace=True)
                    df = df[["pays", "region_who"]].drop_duplicates()
                else:
                    df = df[["pays"]].drop_duplicates()
                dataframes.append(df)
            else:
                logging.warning(f"‚ö†Ô∏è Aucune colonne 'Country' trouv√©e dans {file_path}")
                continue
        
        if not dataframes:
            raise ValueError("Aucune donn√©e valide extraite des fichiers sources")
            
        logging.info("‚úÖ Extraction r√©ussie")
        return dataframes
        
    except FileNotFoundError as e:
        logging.error(f"‚ùå Erreur d'acc√®s fichier : {str(e)}")
        return None
    except ValueError as e:
        logging.error(f"‚ùå Erreur de donn√©es : {str(e)}")
        return None
    except Exception as e:
        logging.error(f"‚ùå Erreur inattendue lors de l'extraction : {str(e)}")
        return None

# ---------------------- üü° TRANSFORMATION (Transform) ----------------------
def transform_data(dataframes):
    """
    TRANSFORMATION : Nettoyage et structuration des donn√©es
    Args:
        dataframes (list): Liste des DataFrames √† transformer
    Returns:
        DataFrame: Donn√©es transform√©es ou None en cas d'erreur
    """
    try:
        logging.info("üîÑ D√©but de la transformation...")
        
        # 1. Concat√©nation des DataFrames
        try:
            pays_df = pd.concat(dataframes, ignore_index=True)
            if pays_df.empty:
                raise ValueError("Aucune donn√©e apr√®s concat√©nation")
        except Exception as e:
            raise ValueError(f"Erreur lors de la concat√©nation : {str(e)}")
            
        # 2. Nettoyage des donn√©es
        try:
            # Standardisation des noms de pays
            pays_df["pays"] = pays_df["pays"].str.strip().str.lower().str.replace(r"\s+", " ", regex=True)
            
            # Nettoyage des r√©gions si pr√©sentes
            if "region_who" in pays_df.columns:
                pays_df["region_who"] = pays_df["region_who"].str.strip().str.lower()
            
            # Suppression des doublons
            pays_df.drop_duplicates(subset=["pays"], inplace=True)
            
            if pays_df.empty:
                raise ValueError("Aucune donn√©e valide apr√®s nettoyage")
                
        except Exception as e:
            raise ValueError(f"Erreur lors du nettoyage : {str(e)}")
            
        # 3. Ajout des identifiants
        pays_df.insert(0, "id_pays", range(1, len(pays_df) + 1))
        
        logging.info("‚úÖ Transformation r√©ussie")
        return pays_df
        
    except ValueError as e:
        logging.error(f"‚ùå Erreur de transformation : {str(e)}")
        return None
    except Exception as e:
        logging.error(f"‚ùå Erreur inattendue lors de la transformation : {str(e)}")
        return None

# ---------------------- üîµ CHARGEMENT (Load) ----------------------
def load_data(df):
    """
    CHARGEMENT : Sauvegarde des donn√©es transform√©es
    Args:
        df (DataFrame): Donn√©es √† sauvegarder
    Returns:
        bool: True si succ√®s, False sinon
    """
    try:
        logging.info("üîÑ D√©but du chargement...")
        
        output_file = Path('../DatasetClean/pays_clean.csv')
        
        # 1. Pr√©paration du dossier de sortie
        try:
            output_file.parent.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            raise IOError(f"Impossible de cr√©er le dossier de sortie : {str(e)}")
            
        # 2. Sauvegarde des donn√©es
        try:
            df.to_csv(output_file, index=False)
        except Exception as e:
            raise IOError(f"Erreur lors de la sauvegarde : {str(e)}")
            
        # 3. V√©rification
        if not output_file.exists():
            raise FileNotFoundError("Le fichier n'a pas √©t√© cr√©√©")
            
        # 4. Validation des donn√©es sauvegard√©es
        try:
            verification_df = pd.read_csv(output_file)
            if verification_df.empty or len(verification_df) != len(df):
                raise ValueError("Les donn√©es sauvegard√©es sont incompl√®tes")
        except Exception as e:
            raise ValueError(f"Erreur lors de la v√©rification : {str(e)}")
            
        logging.info(f"‚úÖ Chargement r√©ussi - {len(df)} pays enregistr√©s")
        return True
        
    except (IOError, FileNotFoundError, ValueError) as e:
        logging.error(f"‚ùå Erreur de chargement : {str(e)}")
        return False
    except Exception as e:
        logging.error(f"‚ùå Erreur inattendue lors du chargement : {str(e)}")
        return False

# ---------------------- üöÄ EXECUTION ----------------------
def main():
    """
    Fonction principale : Orchestration du processus ETL
    """
    try:
        logging.info("üöÄ D√©but du processus ETL pour pays")
        
        # EXTRACTION
        dataframes = extract_data()
        if dataframes is None:
            raise Exception("√âchec de l'extraction des donn√©es")
            
        # TRANSFORMATION
        transformed_df = transform_data(dataframes)
        if transformed_df is None:
            raise Exception("√âchec de la transformation des donn√©es")
            
        # CHARGEMENT
        if not load_data(transformed_df):
            raise Exception("√âchec du chargement des donn√©es")
            
        logging.info("‚úÖ Processus ETL termin√© avec succ√®s")
        
    except Exception as e:
        logging.error(f"‚ùå Erreur dans le processus ETL : {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
